"use strict";(self.webpackChunkhelpmefindlaw_docs=self.webpackChunkhelpmefindlaw_docs||[]).push([[526],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},29789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const i={sidebar_position:1},o="Question and Answer",l={unversionedId:"use-cases/qanda",id:"use-cases/qanda",title:"Question and Answer",description:"Using the /retreival endpoint, you can build your own legal Question and Answer with sources chain by consuming the helpmefindlaw API as a retreiver with langchain or llama index. This is usefull if you want to get access to the raw retreival functionality of our RAG pipeline, which includes the joint functionality of a vector search and knowledge graph over our custom laws dataset.",source:"@site/docs/use-cases/qanda.md",sourceDirName:"use-cases",slug:"/use-cases/qanda",permalink:"/docs/use-cases/qanda",draft:!1,editUrl:"https://github.com/helpmefindlaw/docs/tree/main/docs/use-cases/qanda.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"documentationSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Contract Drafting",permalink:"/docs/use-cases/contract-drafting"}},s={},c=[{value:"Langchain Example",id:"langchain-example",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"question-and-answer"},"Question and Answer"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"/retreival")," endpoint, you can build your own legal Question and Answer with sources chain by consuming the helpmefindlaw API as a retreiver with langchain or llama index. This is usefull if you want to get access to the raw retreival functionality of our RAG pipeline, which includes the joint functionality of a vector search and knowledge graph over our custom laws dataset."),(0,a.kt)("h2",{id:"langchain-example"},"Langchain Example"),(0,a.kt)("p",null,"We define a custom langchain retriever like so"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="examples/src/utils/langchain.py"',title:'"examples/src/utils/langchain.py"'},'from typing import List\n\nfrom .api import HelpMeFindLawRetrievalInput, HelpMeFindLawClient\nfrom langchain.callbacks.manager import CallbackManagerForRetrieverRun\nfrom langchain.schema import BaseRetriever, Document\n\n\nclass HelpMeFindLawRetriever(BaseRetriever):\n    """`HelpMeFindLaw` retriever.\n\n    It is used for the question-answering with sources with\n    the `/retrieve` endpoint of HelpMeFindLaw."""\n\n    client: HelpMeFindLawClient\n\n    def _get_relevant_documents(\n        self, query: str, *, run_manager: CallbackManagerForRetrieverRun\n    ) -> List[Document]:\n        """Get documents relevant for a query."""\n        docs = self.client.retrieve(HelpMeFindLawRetrievalInput(prompt=query))\n\n        # parse source nodes\n        docs = []\n        for doc in docs:\n            metadata = doc.metadata or {}\n            docs.append(\n                Document(\n                    page_content=doc.text,\n                    metadata=metadata)\n            )\n        return docs\n')),(0,a.kt)("p",null,"With this retriever, it is quite straight forward to add HelpMeFindLaw into your langchain workflows. The example below builds a RetrievalQA chain from the HelpMeFindLaw retriever. This allows you to develop your own legal QandA system leveraging the data and retreival optimizations within HelpMeFindLaw."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="qanda.py"',title:'"qanda.py"'},'import os\nfrom dotenv import load_dotenv\nfrom utils.api import HelpMeFindLawClient\nfrom utils.langchain import HelpMeFindLawRetriever\nfrom langchain.chains import RetrievalQA\nfrom langchain.chat_models import ChatOpenAI\n\nclient = HelpMeFindLawClient(token="******")\nretriever = HelpMeFindLawRetriever(client=client)\nllm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0)\nchain = RetrievalQA.from_chain_type(llm, retriever=retriever)\n\nquestion = "What is the statute of limitations for a personal injury claim in California?"\nresult = chain({"query": question})\n')))}d.isMDXComponent=!0}}]);